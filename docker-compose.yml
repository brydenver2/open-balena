volumes:
  cert-manager-data: {}
  certs-data: {}
  db-data: {}
  pki-data: {}
  redis-data: {}
  resin-data: {}
  s3-data: {}
  builder-storage: {}
  delta-storage: {}
  helper-storage: {}

x-default-healthcheck: &default-healthcheck
  test: /usr/src/app/docker-hc
  interval: 45s
  timeout: 15s
  retries: 3

x-default-environment: &default-environment
  # FIXME: hardcoded https://github.com/balena-io/open-balena-db/blob/master/create-resin-db.sh#L4
  DB_NAME: resin
  # FIXME: hardcoded https://github.com/balena-io/open-balena-db/blob/master/Dockerfile#L3-L4
  DB_PASSWORD: docker
  DB_USER: docker
  LOG_LEVEL: DEBUG
  PRODUCTION_MODE: 'true'

x-default-healthcheck-trait: &with-default-healthcheck
  healthcheck:
    <<: *default-healthcheck

x-default-volumes-trait: &with-default-volumes
  volumes:
    - certs-data:/certs
    - resin-data:/balena

x-default-privileges-trait: &with-default-privileges
  cap_add:
    - SYS_ADMIN
    - SYS_RESOURCE
  security_opt:
    - apparmor=unconfined
  tmpfs:
    - /run
    - /sys/fs/cgroup

x-extended-privileges-trait: &with-extended-privileges
  security_opt:
    - apparmor=unconfined
    - seccomp=unconfined

x-all-privileges-trait: &with-all-privileges
  privileged: true
  cap_add:
    - ALL

x-network-privileges-trait: &with-network-privileges
  cap_add:
    - NET_ADMIN
    - SYS_ADMIN
    - SYS_RESOURCE

x-base-service-definition: &base-service
  restart: 'unless-stopped'
  # for docker-compose only, no effect on balenaCloud
  env_file:
    - .env
  tty: true  # send syastemd logs from containers to stdout

services:
  # https://github.com/balena-io/open-balena-api
  api:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: balena/open-balena-api:37.3.4
    container_name: api
    depends_on:
      - redis
    environment:
      <<: *default-environment
      CONTRACTS_PUBLIC_REPO_NAME: contracts
      CONTRACTS_PUBLIC_REPO_OWNER: balena-io
      DB_GENERAL_REPLICA_MAX_USES: 1000
      DB_GENERAL_REPLICA_PORT: ${EXTERNAL_POSTGRES_PORT:-5432}
      DB_HOST: ${EXTERNAL_POSTGRES_HOST:-db}
      DB_PORT: ${EXTERNAL_POSTGRES_PORT:-5432}
      DB_STATE_REPLICA_MAX_USES: 1000
      DB_STATE_REPLICA_PORT: ${EXTERNAL_POSTGRES_PORT:-5432}
      DB_USER: ${EXTERNAL_POSTGRES_USER:-docker}
      DB_PASSWORD: ${EXTERNAL_POSTGRES_PASSWORD:-docker}
      DB_NAME: ${EXTERNAL_POSTGRES_DATABASE:-resin}
      DELTA_HOST: delta.${DNS_TLD}
      HOSTS_CONFIG: API_HOST:api,DB_HOST:${EXTERNAL_POSTGRES_HOST:-db},DELTA_HOST:delta,HOST:api,REDIS_HOST:redis,TOKEN_AUTH_CERT_ISSUER:api,VPN_HOST:cloudlink,REGISTRY2_HOST:registry2
      IMAGE_STORAGE_BUCKET: resin-production-img-cloudformation
      IMAGE_STORAGE_ENDPOINT: ${EXTERNAL_S3_ENDPOINT:-s3.amazonaws.com}
      IMAGE_STORAGE_PREFIX: images
      JSON_WEB_TOKEN_EXPIRY_MINUTES: 10080
      NUM_WORKERS: 1
      OAUTH_CALLBACK_PROTOCOL: https
      PORT: 80
      REDIS_HOST: redis:6379
      REDIS_IS_CLUSTER: 'false'
      REGISTRY2_S3_KEY: ${EXTERNAL_S3_ACCESS_KEY:-}
      REGISTRY2_S3_SECRET: ${EXTERNAL_S3_SECRET_KEY:-}
      TOKEN_AUTH_JWT_ALGO: ES256
      TOKENS_CONFIG: API_SERVICE_API_KEY:hex,AUTH_RESINOS_REGISTRY_CODE:hex,COOKIE_SESSION_SECRET:hex,JSON_WEB_TOKEN_SECRET:hex,MIXPANEL_TOKEN:hex,SUPERUSER_PASSWORD:hex,TOKEN_AUTH_BUILDER_TOKEN:hex,VPN_GUEST_API_KEY:hex,VPN_SERVICE_API_KEY:hex,API_VPN_SERVICE_API_KEY:API_SERVICE_API_KEY,REGISTRY2_TOKEN:TOKEN_AUTH_BUILDER_TOKEN,REGISTRY2_S3_KEY:hex,REGISTRY2_S3_SECRET:hex
      TRUST_PROXY: 172.16.0.0/12
      VPN_PORT: 443
      WEBRESOURCES_S3_ACCESS_KEY: ${EXTERNAL_S3_ACCESS_KEY:-}
      WEBRESOURCES_S3_SECRET_KEY: ${EXTERNAL_S3_SECRET_KEY:-}
      WEBRESOURCES_S3_BUCKET: web-resources
      WEBRESOURCES_S3_HOST: ${EXTERNAL_S3_ENDPOINT:-s3}
      WEBRESOURCES_S3_REGION: ${EXTERNAL_S3_REGION:-us-east-1}

  # https://github.com/balena-io/open-balena-registry
  registry:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
    ]
    image: balena/open-balena-registry:2.42.0
    container_name: registry
    volumes:
      - certs-data:/certs
      - resin-data:/balena
    depends_on:
      - redis
    environment:
      COMMON_REGION: open-balena
      HOSTS_CONFIG: REGISTRY2_HOST:registry2,REGISTRY2_TOKEN_AUTH_ISSUER:api,REGISTRY2_TOKEN_AUTH_REALM:api
      REGISTRY2_CACHE_ADDR: redis:6379
      REGISTRY2_CACHE_DB: 1
      REGISTRY2_CACHE_ENABLED: 'true'
      REGISTRY2_S3_BUCKET: registry-data
      REGISTRY2_S3_REGION_ENDPOINT: ${EXTERNAL_S3_ENDPOINT:-s3}
      REGISTRY2_S3_KEY: ${EXTERNAL_S3_ACCESS_KEY:-}
      REGISTRY2_S3_SECRET: ${EXTERNAL_S3_SECRET_KEY:-}
      REGISTRY2_STORAGEPATH: /data
      TOKENS_CONFIG: REGISTRY2_SECRETKEY:hex,REGISTRY2_S3_KEY:hex,REGISTRY2_S3_SECRET:hex

  # https://github.com/balena-io/open-balena-vpn
  vpn:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-volumes,
      # privileges in order from minimum to maximum
      *with-network-privileges,
      *with-default-privileges,
    ]
    image: balena/open-balena-vpn:11.32.28
    container_name: vpn
    depends_on:
      - api
    environment:
      HOSTS_CONFIG: VPN_HOST:cloudlink
      TOKENS_CONFIG: ','
      VPN_HAPROXY_USEPROXYPROTOCOL: 'true'
      VPN_PORT: 443
      # ensure correct service instance IP is registered with the API
      VPN_SERVICE_REGISTER_INTERFACE: eth0
    devices:
      - /dev/net/tun

  # https://github.com/balena-io/open-balena-db
  db:
    <<: *base-service
    image: balena/open-balena-db:6.0.0
    container_name: db
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      <<: *default-environment
    healthcheck:
      test: pg_isready -U "$${DB_USER}" -d "$${DB_NAME}"
    profiles:
      - internal-postgres

  # https://github.com/balena-io/open-balena-s3
  s3:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
    ]
    image: balena/open-balena-s3:2.28.75
    container_name: s3
    volumes:
      - s3-data:/export
      - certs-data:/certs
      - resin-data:/balena
    environment:
      BUCKETS: registry-data;web-resources
      HOSTS_CONFIG: REGISTRY2_S3_REGION_ENDPOINT:s3,WEBRESOURCES_S3_HOST:s3
      TOKENS_CONFIG: REGISTRY2_S3_KEY:hex,REGISTRY2_S3_SECRET:hex,S3_MINIO_ACCESS_KEY:REGISTRY2_S3_KEY,S3_MINIO_SECRET_KEY:REGISTRY2_S3_SECRET,WEBRESOURCES_S3_ACCESS_KEY:REGISTRY2_S3_KEY,WEBRESOURCES_S3_SECRET_KEY:REGISTRY2_S3_SECRET
    profiles:
      - internal-s3

  # https://hub.docker.com/_/redis
  redis:
    <<: *base-service
    # https://redis.io/blog/what-redis-license-change-means-for-our-managed-service-providers/
    image: redis:8.0-alpine
    container_name: redis
    volumes:
      - redis-data:/data
    healthcheck:
      <<: *default-healthcheck
      test: echo INFO | redis-cli | grep redis_version

  # Traefik reverse proxy (replaces HAProxy)
  traefik:
    <<: [
      *base-service,
      *with-default-privileges,
      *with-default-volumes,
    ]
    build: src/traefik
    container_name: traefik
    sysctls:
      # https://github.com/docker-library/haproxy/issues/160
      net.ipv4.ip_unprivileged_port_start: 0
    healthcheck:
      test: traefik healthcheck --ping
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      # HTTP
      - '80:80/tcp'
      # HTTPS
      - '443:443/tcp'
      # Traefik dashboard/stats
      - '1936:1936/tcp'
      # Remote device access TCP ports
      - '10000:10000/tcp'
      - '10001:10001/tcp'
      - '10002:10002/tcp'
      - '10003:10003/tcp'
      - '10004:10004/tcp'
      - '10005:10005/tcp'
      - '10006:10006/tcp'
      - '10007:10007/tcp'
      - '10008:10008/tcp'
      - '10009:10009/tcp'
    environment:
      LOGLEVEL: ${LOGLEVEL:-INFO}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # Error pages service for Traefik
  error-pages:
    <<: *base-service
    build: src/error-pages
    container_name: error-pages
    healthcheck:
      test: curl -f http://localhost/404.html || exit 1
      interval: 30s
      timeout: 5s
      retries: 3

  # dynamically configure Docker network aliases based on DNS_TLD and ALIAS list
  # allows DNS resolution from systemd-less images on the Docker network
  # Updated to work with Traefik instead of HAProxy
  traefik-sidecar:
    <<: *base-service
    build: src/traefik-sidecar
    container_name: traefik-sidecar
    volumes:
      - /var/run/docker.sock:/host/run/docker.sock
    environment:
      DOCKER_HOST: unix:///host/run/docker.sock
      # resolved internally as {{service}}.{{dns-tld-without-balena-device-uuid}} to traefik service
      ALIASES: api,ca,cloudlink,db,delta,logs,redis,registry2,s3,stats,tunnel,admin,ui,postgrest,remote,builder,helper
    labels:
      io.balena.features.balena-socket: 1
      io.balena.features.supervisor-api: 1

  # https://github.com/balena-io/cert-manager
  # https://certbot.eff.org/docs/using.html
  # https://certbot-dns-cloudflare.readthedocs.io/
  cert-manager:
    <<: *base-service
    image: balena/cert-manager:0.3.3
    container_name: cert-manager
    volumes:
      - cert-manager-data:/etc/letsencrypt
      - certs-data:/certs
      - resin-data:/balena
    depends_on:
      - balena-ca
    environment:
      # wildcard certificate for reverse proxy
      SSH_KEY_NAMES: ','
      SUBJECT_ALTERNATE_NAMES: '*'
    labels:
      io.balena.features.balena-api: 1
      io.balena.features.supervisor-api: 1

  # https://github.com/balena-io/ca-private
  # https://github.com/cloudflare/cfssl/blob/master/doc/api/intro.txt
  balena-ca:
    <<: *base-service
    image: balena/ca-private:0.0.15
    container_name: balena-ca
    volumes:
      - pki-data:/pki
      - certs-data:/certs
      - resin-data:/balena
    healthcheck:
      test: curl --silent -I --fail localhost:8888
      interval: 60s
      timeout: 60s
      retries: 10
    labels:
      # future expansion
      io.balena.features.balena-api: 1
      io.balena.features.supervisor-api: 1

  # Cloudflare Tunnel service for secure external access
  cloudflared:
    <<: *base-service
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    healthcheck:
      test: pgrep cloudflared || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
    command: tunnel --no-autoupdate run

  # OpenBalena UI - Web dashboard interface
  ui:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-ui:latest
    container_name: ui
    depends_on:
      - api
    environment:
      # JWT secret for authentication
      OPEN_BALENA_JWT_SECRET: ${JSON_WEB_TOKEN_SECRET}
      # S3 configuration for storage access
      OPEN_BALENA_S3_URL: https://s3.${DNS_TLD}
      OPEN_BALENA_S3_ACCESS_KEY: ${REGISTRY2_S3_KEY}
      OPEN_BALENA_S3_SECRET_KEY: ${REGISTRY2_S3_SECRET}
      OPEN_BALENA_S3_REGISTRY_BUCKET: registry-data
      # Service URLs for internal communication
      REACT_APP_OPEN_BALENA_UI_URL: https://admin.${DNS_TLD}
      REACT_APP_OPEN_BALENA_POSTGREST_URL: https://postgrest.${DNS_TLD}
      REACT_APP_OPEN_BALENA_REMOTE_URL: https://remote.${DNS_TLD}
      REACT_APP_OPEN_BALENA_API_URL: https://api.${DNS_TLD}
      # UI customization
      REACT_APP_OPEN_BALENA_API_VERSION: ${OPENBALENA_API_VERSION:-v37.3.4}
      REACT_APP_BANNER_IMAGE: ${REACT_APP_BANNER_IMAGE:-./banner_illustration.svg}
      PORT: 80

  # PostgREST - REST API for PostgreSQL
  postgrest:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-postgrest:latest
    container_name: postgrest
    environment:
      # Database connection URI (uses external DB if EXTERNAL_POSTGRES=true)
      PGRST_DB_URI: ${PGRST_DB_URI:-postgres://docker:docker@db:5432/resin}
      # Database schema to expose via REST API
      PGRST_DB_SCHEMA: ${PGRST_DB_SCHEMA:-public}
      # JWT secret for authentication (same as used by open-balena-api)
      PGRST_JWT_SECRET: ${JSON_WEB_TOKEN_SECRET}
      # PostgreSQL role for database access
      OPENBALENA_DB_ROLE: ${OPENBALENA_DB_ROLE:-docker}

  # Remote - Remote device access service
  remote:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-remote:latest
    container_name: remote
    depends_on:
      - api
    environment:
      # Domain of your open-balena instance
      BALENARC_BALENA_URL: ${DNS_TLD}

  # Builder - Container build functionality
  builder:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-builder:latest
    container_name: builder
    depends_on:
      - api
    environment:
      # Domain configuration
      BALENA_TLD: ${DNS_TLD}
      # Service hostnames for internal communication
      API_HOST: ${API_HOST:-api.${DNS_TLD}}
      DELTA_HOST: ${DELTA_HOST:-delta.${DNS_TLD}}
      # Docker host configurations for different architectures
      DOCKER_HOST_AMD64: ${DOCKER_HOST_AMD64:-}
      DOCKER_HOST_ARM64: ${DOCKER_HOST_ARM64:-}
      # Authentication token
      TOKEN_AUTH_BUILDER_TOKEN: ${TOKEN_AUTH_BUILDER_TOKEN}
      # Docker configuration
      DOCKER_BUILDKIT: '0'
    volumes:
      # Persistent storage for build artifacts and cache
      - builder-storage:/storage
      # Docker socket for container builds
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true

  # Delta - Delta update processing service
  delta:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-delta:latest
    container_name: delta
    depends_on:
      - api
    environment:
      # Domain configuration
      BALENA_TLD: ${DNS_TLD}
      # Registry hostname for internal communication
      REGISTRY_HOST: ${REGISTRY_HOST:-registry.${DNS_TLD}}
      # Docker host configuration
      DOCKER_HOST: unix:///var/run/docker.sock
      # Authentication token
      TOKEN_AUTH_BUILDER_TOKEN: ${TOKEN_AUTH_BUILDER_TOKEN}
      # Docker configuration
      DOCKER_BUILDKIT: '0'
    volumes:
      # Persistent storage for delta processing workspace
      - delta-storage:/storage
      # Volume for balena-engine overlay2 filesystem support
      - /var/lib/balena-engine:/var/lib/balena-engine
      # Volume for rsync deltas (v2 delta support)
      - /delta-rsync:/delta-rsync
      # Docker socket for container operations
      - /var/run/docker.sock:/var/run/docker.sock
      # Certificate volume for authentication (API public key)
      - certs-data:/certs

  # Helper - Utility functions service
  helper:
    <<: [
      *base-service,
      *with-default-healthcheck,
      *with-default-privileges,
      *with-default-volumes,
    ]
    image: harmonidcaputo/open-balena-helper:latest
    container_name: helper
    depends_on:
      - api
    environment:
      # API hostname for internal communication
      API_HOST: ${API_HOST:-api.${DNS_TLD}}
      # S3 storage configuration
      IMAGE_STORAGE_ENDPOINT: ${IMAGE_STORAGE_ENDPOINT:-s3.${DNS_TLD}}
      IMAGE_STORAGE_BUCKET: ${IMAGE_STORAGE_BUCKET:-resin-production-img-cloudformation}
      IMAGE_STORAGE_PREFIX: ${IMAGE_STORAGE_PREFIX:-images}
      IMAGE_STORAGE_ACCESS_KEY: ${IMAGE_STORAGE_ACCESS_KEY:-${REGISTRY2_S3_KEY}}
      IMAGE_STORAGE_SECRET_KEY: ${IMAGE_STORAGE_SECRET_KEY:-${REGISTRY2_S3_SECRET}}
      IMAGE_STORAGE_FORCE_PATH_STYLE: ${IMAGE_STORAGE_FORCE_PATH_STYLE:-true}
    volumes:
      # Persistent storage for downloads and supervisor releases
      - helper-storage:/storage


  # --- End of runtime services ---
